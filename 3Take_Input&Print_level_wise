-----------------------------------------------------Take Input level wise--------------------------------------------------------------------
BinaryTreeNode<int>* 3TakeInputLevelWise(){ 
  int rootData;
  cout<<"enter root data"<<endl;
  cin<<rootData;
  if(rootData==-1){
    return NULL;
  }
  BinaryTreeNode<int>* root=new BinaryTreeNode<int>(rootData);
  
  queue<BinaryTreeNode<int>*> PendingNodes;
  PendingNodes.push(root);
  
  while(PendingNodes.size() !=0){
    BinaryTreeNode<int>* front=PendingNodes.front();
    PendingNodes.pop();

    int leftchildData;
    cout<<"Enter left child of"<<front->data<<endl;
    if(leftchildData!=NULL){ 
      BinaryTreeNode<int>* leftchild=new BinaryTreeNode<int>(leftchildData);
    }
    root->left=leftchild;
    PendingNodes.push(leftchild);
    }
    int rightchildData;
    cout<<"Enter right child of"<<front->data<<endl;
    if(rightchildData!=NULL){ 
      BinaryTreeNode<int>* rightchild=new BinaryTreeNode<int>(rightchildData);
    }
    root->right=rightchild;
    PendingNodes.push(rightchild);
    }
  return root;
  }
  
  int main(){
    BinaryTreeNode<int>* root=TakeInputLevelWise();
    PrintTree(root);
    delete root;
  }
---------------------------------------------print Input level wise-------------------------------------------------------------------------

#include<queue>
void printLevelWise(BinaryTreeNode<int> *root) {
	// Write your code here
	if(root==NULL)
	{
		return ;
	}
	queue<BinaryTreeNode<int>*> PendingNodes;
	PendingNodes.push(root);
	while(PendingNodes.size() != 0){
		BinaryTreeNode<int>* front=PendingNodes.front();
		PendingNodes.pop();
		cout<<front->data<<":";
		if(front->left != NULL)
		{
			cout<<"L:"<<front->left->data<<",";
			PendingNodes.push(front->left);
		}
		else
		{
			cout<<"L:"<<"-1"<<",";
		}
		if(front->right != NULL)
		{
			cout<<"R:"<<front->right->data<<endl;
			PendingNodes.push(front->right);
		}
		else
		{
			cout<<"R:"<<"-1"<<endl;
		}
		}
}
