BinaryTreeNode<int>* BuildTreeHelper(int* in, int* pre, int inS, int inE, int preS, int preE)
{
  if(inS > inE)                           //BASE CASE
  {
    return NULL;
  }
  int rootData=pre[preS];
  int rootIndex=-1;
  for(int i=inS;i<=inE;i++)
  {
    if(in[i]==rootData)
    {
      rootIndex=i;
      break;
    }
  }
  
  int linS=inS;                             //linS-left inorder Start
  int linE=rootIndex-1;
  int lpreS=preS+1;
  int lpreE=rinE-rinS+lpreS;                //lpreE-left preorder End                                       //linE-linS = rpreE-rpreS
  int rinS=index+1;
  int rinE=inE;
  int rpreS=lpreE+1;
  int rpreE=preE;                           //rpreE- right preorder End

  
  BinaryTreeNode<int>* root=new BinaryTreeNode<int>(rootData);
  root->left=BuildTreeHelper(in, pre, linS, linE, lpreS, lpreE);
  root->right=BuildTreeHelper(in, pre, rinS, rinE, rpreS, rpreE);
  return root;
}
BinaryTreeNode<int>* BuildTree(int* in, int* pre, int size)
{
  return BuildTreeHelper(in, pre, 0, size-1, 0, size-1);
}
