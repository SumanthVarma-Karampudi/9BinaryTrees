int height(BinaryTreeNode<int>* root)
{
  if(root==NULL)
    return 0;
   
   return 1+max(height(root->left),height(root->right));
 }

int Diameter(BinaryTreeNode<int>* root)
{
  if(root==NULL)
  {
    return 0;
  }
  
  int option1=height(root->left)+height(root->right);
  int option2=Diameter(root->left);
  int option3=Diameter(root->right);
  
  return max(option1, max(option2, option3);
  }
  
  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>OPTIMIZED APPROACH>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
  pair<int, int> heightDiameter(BinaryTreeNode<int>* root)                //return type is in-built pair class
  {
    if(root==NULL)
    {
      pair<int, int> p;                                                   //Creating a pair
      p.first=0;
      p.second=0;
      return p;
    }
    
