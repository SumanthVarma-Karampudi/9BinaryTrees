-------------------------------------------------------------numberOfNodes-------------------------------------------------------------------------
int NumNodes(BinaryTreeNode<int>* root)
{
  if(root==NULL)
  { 
    return 0;
  }
  return 1+NumNodes(root->left)+NumNodes(root->right);
}

---------------------------------------------------------- --isNodePresent---------------------------------------------------------------------------
bool isNodePresent(BinaryTreeNode<int> *root, int x) {
    // Write your code here
    if(root==NULL){
        return false;
    }
    else if (root->data == x) {
      return true;
    }
    return isNodePresent(root->left,x) || isNodePresent(root-> right, x);
}

-------------------------------------------------------------HeightofBinaryTree------------------------------------------------------------------

int height(BinaryTreeNode<int>* root) {
    // Write our code here
	if(root==NULL){
		return 0;
	}
	return 1+max(height(root->left),height(root->right));
}

----------------------------------------------------------------MirrorBinaryTree-----------------------------------------------------------------

void mirrorBinaryTree(BinaryTreeNode<int>* root) {
    // Write your code here
	 if(!root)
       return;
    BinaryTreeNode<int>* temp=root->left;
    
    root->left=root->right;
    root->right=temp;
    
    mirrorBinaryTree(root->left);
    mirrorBinaryTree(root->right);
}
